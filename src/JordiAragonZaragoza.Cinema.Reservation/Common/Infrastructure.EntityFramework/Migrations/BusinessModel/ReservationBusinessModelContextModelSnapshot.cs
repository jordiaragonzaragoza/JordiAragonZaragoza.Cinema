// <auto-generated />
using System;
using JordiAragonZaragoza.Cinema.Reservation.Common.Infrastructure.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace JordiAragonZaragoza.Cinema.Reservation.Common.Infrastructure.EntityFramework.Migrations.BusinessModelStore
{
    [DbContext(typeof(ReservationBusinessModelContext))]
    partial class ReservationBusinessModelContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("JordiAragonZaragoza.Cinema.Reservation.Auditorium.Domain.Auditorium", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Rows")
                        .HasColumnType("integer");

                    b.Property<int>("SeatsPerRow")
                        .HasColumnType("integer");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.ToTable("Auditoriums", (string)null);
                });

            modelBuilder.Entity("JordiAragonZaragoza.Cinema.Reservation.Movie.Domain.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<TimeSpan>("Runtime")
                        .HasColumnType("interval");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.ToTable("Movies", (string)null);
                });

            modelBuilder.Entity("JordiAragonZaragoza.Cinema.Reservation.Showtime.Domain.Showtime", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuditoriumId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnded")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("SessionDateOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.ToTable("Showtimes", (string)null);
                });

            modelBuilder.Entity("JordiAragonZaragoza.Cinema.Reservation.User.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("JordiAragonZaragoza.SharedKernel.Infrastructure.Idempotency.IdempotentConsumer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConsumerFullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("__IdempotentConsumers", (string)null);
                });

            modelBuilder.Entity("JordiAragonZaragoza.SharedKernel.Infrastructure.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DateOccurredOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DateProcessedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Error")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.ToTable("__OutboxMessages", (string)null);
                });

            modelBuilder.Entity("JordiAragonZaragoza.Cinema.Reservation.Auditorium.Domain.Auditorium", b =>
                {
                    b.OwnsMany("JordiAragonZaragoza.Cinema.Reservation.Showtime.Domain.ShowtimeId", "ActiveShowtimes", b1 =>
                        {
                            b1.Property<Guid>("AuditoriumId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("Value")
                                .HasColumnType("uuid")
                                .HasColumnName("ShowtimeId");

                            b1.HasKey("AuditoriumId", "Id");

                            b1.ToTable("AuditoriumsActiveShowtimeIds", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("AuditoriumId");
                        });

                    b.OwnsMany("JordiAragonZaragoza.Cinema.Reservation.Auditorium.Domain.Seat", "Seats", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("Id");

                            b1.Property<Guid>("AuditoriumId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Row")
                                .HasColumnType("integer");

                            b1.Property<int>("SeatNumber")
                                .HasColumnType("integer");

                            b1.HasKey("Id", "AuditoriumId");

                            b1.HasIndex("AuditoriumId");

                            b1.ToTable("AuditoriumsSeats", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("AuditoriumId");
                        });

                    b.Navigation("ActiveShowtimes");

                    b.Navigation("Seats");
                });

            modelBuilder.Entity("JordiAragonZaragoza.Cinema.Reservation.Movie.Domain.Movie", b =>
                {
                    b.OwnsOne("JordiAragonZaragoza.Cinema.Reservation.Movie.Domain.ExhibitionPeriod", "ExhibitionPeriod", b1 =>
                        {
                            b1.Property<Guid>("MovieId")
                                .HasColumnType("uuid");

                            b1.Property<DateTimeOffset>("EndOfPeriodOnUtc")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("EndOfExhibitionPeriodOnUtc");

                            b1.Property<DateTimeOffset>("StartingPeriodOnUtc")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("StartingExhibitionPeriodOnUtc");

                            b1.HasKey("MovieId");

                            b1.ToTable("Movies");

                            b1.WithOwner()
                                .HasForeignKey("MovieId");
                        });

                    b.OwnsMany("JordiAragonZaragoza.Cinema.Reservation.Showtime.Domain.ShowtimeId", "ActiveShowtimes", b1 =>
                        {
                            b1.Property<Guid>("MovieId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("Value")
                                .HasColumnType("uuid")
                                .HasColumnName("ShowtimeId");

                            b1.HasKey("MovieId", "Id");

                            b1.ToTable("MoviesActiveShowtimeIds", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("MovieId");
                        });

                    b.Navigation("ActiveShowtimes");

                    b.Navigation("ExhibitionPeriod")
                        .IsRequired();
                });

            modelBuilder.Entity("JordiAragonZaragoza.Cinema.Reservation.Showtime.Domain.Showtime", b =>
                {
                    b.OwnsMany("JordiAragonZaragoza.Cinema.Reservation.Showtime.Domain.Reservation", "Reservations", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("Id");

                            b1.Property<Guid>("ShowtimeId")
                                .HasColumnType("uuid");

                            b1.Property<bool>("IsPurchased")
                                .HasColumnType("boolean");

                            b1.Property<DateTimeOffset>("ReservationDateOnUtc")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("ReservationDate");

                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid")
                                .HasColumnName("UserId");

                            b1.HasKey("Id", "ShowtimeId");

                            b1.HasIndex("ShowtimeId");

                            b1.ToTable("ShowtimesReservations", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ShowtimeId");

                            b1.OwnsMany("JordiAragonZaragoza.Cinema.Reservation.Auditorium.Domain.SeatId", "Seats", b2 =>
                                {
                                    b2.Property<Guid>("ReservationId")
                                        .HasColumnType("uuid");

                                    b2.Property<Guid>("ShowtimeId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b2.Property<int>("Id"));

                                    b2.Property<Guid>("Value")
                                        .HasColumnType("uuid")
                                        .HasColumnName("SeatId");

                                    b2.HasKey("ReservationId", "ShowtimeId", "Id");

                                    b2.ToTable("ShowtimeReservationSeatIds", (string)null);

                                    b2.WithOwner()
                                        .HasForeignKey("ReservationId", "ShowtimeId");
                                });

                            b1.Navigation("Seats");
                        });

                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
